using LinearAlgebra
function metodo_potencia(n ,A , x, tol, max_it)

    k = 1
    p = 1
    aux1 = 0

    while(aux1 == 0)
        if  (norm(x[p]) == norm(x, Inf))
           aux1 = 1
       end
       p+=1
    end
    p+=-1
    x *= (1/x[p])
    while(k <= max_it)
      y = A*x
      U = y[p]
      aux1 = 0
      p = 1
      while(aux1 == 0)
          if (norm(y[p]) == norm(y, Inf))
              aux1+=1
          end
          p+=1
      end
      p+=-1
      if (y[p] == 0)
        println("ERRO: A matriz tem autovalor 0, tente novamente com um vetor alterio.")
        return ("autovetor",x)
        break
      end

      if (norm((x - y/y[p] ), Inf ) < tol )
        return (U , x)
        break
      end
      x = y/y[p]
      k+=1
    end
    println("ERRO: Número máximo de iterações atingido")

end

function m_google(A)
    α = 0.85
    n = size(A,1)
    for j = 1:n
      if sum(A[:, j]) != 0
        A[:,j] = A[:,j]/ sum(A[:,j])
      else
        A[:,j] .= 1/n
      end
    end
    return (α*A .+ (1 - α)/n)
end

function PageRank(A)
  println(metodo_potencia(6 ,m_google(A) , [1,1,1,1,1,1], 10^-8, 1000)[1])
  println(metodo_potencia(6 ,m_google(A), [1,1,1,1,1,1], 10^-8, 1000)[2]/sum(metodo_potencia(6 ,m_google(A) , [1,1,1,1,1,1], 10^-8, 1000)[2][:]))

  return[ metodo_potencia(6 ,m_google(A) , [1,1,1,1,1,1], 10^-8, 1000)[1], metodo_potencia(6 ,m_google(A), [1,1,1,1,1,1], 10^-8, 1000)[2]/sum(metodo_potencia(6 ,m_google(A) , [1,1,1,1,1,1], 10^-8, 1000)[2][:])]

end

A = [0.0 1 1 0 0 0; 0 0 0 0 0 0; 1 1 0 1 0 0; 0 0 0 0 1 1;0 0 0 0 0 1; 0 0 0 1 1 0]

println(PageRank(A))
